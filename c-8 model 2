CREATE TABLE APP_AUDIT_DATA (
    AUDIT_DATA_ID NUMBER PRIMARY KEY,
    TABLE_ID NUMBER,
    AUDIT_DATA CLOB,
    CTL_INS_DTTM DATE,
    CTL_UPD_USER VARCHAR2(30),
    CTL_REC_STAT CHAR(1)
);

CREATE TABLE APP_AUDIT_TABLE (
    TABLE_ID NUMBER PRIMARY KEY,
    TABLE_NAME VARCHAR2(30) NOT NULL,
    TABLE_DESCRIPTION VARCHAR2(200),
    AUDIT_FLAG VARCHAR2(1),
    ARCHIVE_FLAG VARCHAR2(1),
    ARCHIVE_COUNT INTEGER,
    PURGE_FLAG VARCHAR2(1),
    PURGE_COUNT INTEGER,
    COLUMN_NAMES VARCHAR2(4000),
    COLUMNS_COUNT INTEGER,
    START_DATE DATE,
    END_DATE DATE,
    CTL_INS_DTTM DATE,
    CTL_UPD_DTTM DATE,
    CTL_UPD_USER VARCHAR2(30),
    CTL_REC_STAT CHAR(1)
);
ALTER TABLE APP_AUDIT_DATA 
ADD CONSTRAINT FK_APP_AUDIT_DATA_TABLE 
FOREIGN KEY (TABLE_ID) 
REFERENCES APP_AUDIT_TABLE(TABLE_ID);


CREATE SEQUENCE SEQ_APP_AUDIT_DATA
INCREMENT BY 1
START WITH 1
MINVALUE 1
NOCYCLE
CACHE 20
NOORDER;


INSERT INTO APP_AUDIT_DATA (AUDIT_DATA_ID, TABLE_ID, AUDIT_DATA, CTL_INS_DTTM, CTL_UPD_USER, CTL_REC_STAT)  
VALUES (SEQ_APP_AUDIT_DATA.NEXTVAL, 1, 'Sample Audit Data', SYSDATE, 'Admin', 'A');

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID NUMBER(4) PRIMARY KEY,
    FIRST_NAME VARCHAR2(20),
    LAST_NAME VARCHAR2(20),
    JOB_ID NUMBER(2),
    MANAGER_ID NUMBER(4),
    HIRE_DATE DATE,
    SALARY NUMBER,
    DEPARTMENT_ID NUMBER(2)
);

CREATE TABLE DEPARTMENTS (
    DEPARTMENT_ID NUMBER(2) PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(20),
    CITY VARCHAR2(30),
    STATE CHAR(2)
);

ALTER TABLE EMPLOYEES 
ADD CONSTRAINT FK_EMP_DEPT FOREIGN KEY (DEPARTMENT_ID) 
REFERENCES DEPARTMENTS(DEPARTMENT_ID);

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, CITY, STATE)  
VALUES (10, 'Accounting', 'Pisgah', 'NV');

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, CITY, STATE)  
VALUES (11, 'Production', 'Redlands', 'CA');

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, CITY, STATE)  
VALUES (12, 'Engineering', 'Dallas', 'TX');

COMMIT;

INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, DEPARTMENT_ID)  
VALUES (8377, 'Delphine', 'Wenger', 54, 26, 
        TO_DATE('01/09/1998 01:11:12 PM', 'MM/DD/YYYY HH:MI:SS AM'), 
        102412.44, 10);

INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, DEPARTMENT_ID)  
VALUES (2723, 'Patsy', 'Gaudet', 96, 19, 
        TO_DATE('04/05/1998 01:11:12 PM', 'MM/DD/YYYY HH:MI:SS AM'), 
        87662.97, 10);

COMMIT;
INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, DEPARTMENT_ID)  
VALUES (4034, 'Mario', 'Atwell', 2, 9,  
        TO_DATE('12/08/1997 01:11:12 PM', 'MM/DD/YYYY HH:MI:SS AM'),  
        109001.61, 11);

COMMIT;
--CREATE PACKAGE SPECIFICATION
CREATE OR REPLACE PACKAGE Pkg_App_Audit IS 

    -- Procedure to insert audit data
    PROCEDURE INSERT_DATA (P_TABLE_NAME VARCHAR2, P_COLUMN_VAL CLOB); 

    -- Function to get the old clause (for tracking changes)
    FUNCTION GET_OLD_CLAUSE(P_TABLE_NAME VARCHAR2) RETURN VARCHAR2; 

    -- Function to get column clause for dynamic SQL
    FUNCTION GET_COL_CLAUSE(P_TABLE_NAME VARCHAR2) RETURN VARCHAR2; 

    -- Function to check if auditing is enabled for a table
    FUNCTION AUDIT_CHECK (P_TABLE_NAME VARCHAR2) RETURN BOOLEAN; 

    -- Function to parse values before inserting them into audit logs
    FUNCTION PARSE_VALUES (P_STR VARCHAR2) RETURN VARCHAR2; 

END Pkg_App_Audit;
/

--CREATE PACKAGE BODY
CREATE OR REPLACE PACKAGE BODY Pkg_App_Audit IS 

    -- Global Variables
    G_TABLE_ID NUMBER := NULL; 
    G_COLUMN_SPEC VARCHAR2(4000) := NULL; 

    -- Function to get column clause for dynamic SQL
    FUNCTION GET_COL_CLAUSE(P_TABLE_NAME VARCHAR2) RETURN VARCHAR2 IS 
        V_TMP VARCHAR2(4000) := NULL; 
        V_QUOTES VARCHAR2(3) := ''''; 
        V_CNT NUMBER := 0; 
    BEGIN 
        SELECT COUNT(*) INTO V_CNT 
        FROM USER_TAB_COLUMNS 
        WHERE TABLE_NAME = UPPER(P_TABLE_NAME); 

        FOR I IN 1..V_CNT LOOP 
            V_TMP := V_TMP || V_QUOTES || ':' || I || V_QUOTES || ', ';
        END LOOP; 

        -- Remove the trailing comma and space
        V_TMP := SUBSTR(V_TMP, 1, LENGTH(V_TMP) - 2); 
        RETURN V_TMP; 
    END GET_COL_CLAUSE;

    -- Function to get old clause for tracking changes
    FUNCTION GET_OLD_CLAUSE(P_TABLE_NAME VARCHAR2) RETURN VARCHAR2 IS 
        V_TMP VARCHAR2(4000) := NULL; 
    BEGIN 
        FOR REC IN (SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = UPPER(P_TABLE_NAME) ORDER BY COLUMN_ID) LOOP 
            V_TMP := V_TMP || 'OLD.' || REC.COLUMN_NAME || ', ';
        END LOOP; 

        -- Remove the trailing comma and space
        V_TMP := SUBSTR(V_TMP, 1, LENGTH(V_TMP) - 2); 
        RETURN V_TMP; 
    END GET_OLD_CLAUSE;

    -- Function to check if auditing is enabled for a table
    FUNCTION AUDIT_CHECK(P_TABLE_NAME VARCHAR2) RETURN BOOLEAN IS 
        V_REC APP_AUDIT_TABLE%ROWTYPE; 
    BEGIN 
        BEGIN 
            SELECT * INTO V_REC 
            FROM APP_AUDIT_TABLE 
            WHERE TABLE_NAME = UPPER(P_TABLE_NAME); 
        EXCEPTION 
            WHEN OTHERS THEN RETURN FALSE; 
        END; 

        -- Check auditing conditions
        IF (SYSDATE < V_REC.START_DATE OR SYSDATE > V_REC.END_DATE) OR V_REC.AUDIT_FLAG <> 'Y' THEN 
            RETURN FALSE; 
        END IF; 

        -- Set global variables
        G_TABLE_ID := V_REC.TABLE_ID; 
        G_COLUMN_SPEC := V_REC.COLUMN_NAMES; 
        RETURN TRUE; 
    END AUDIT_CHECK;

    -- Function to parse values before inserting into audit logs
    FUNCTION PARSE_VALUES(P_STR VARCHAR2) RETURN VARCHAR2 IS 
        V_VAL VARCHAR2(4000) := NULL; 
        V_STR VARCHAR2(4000); 
        V_POS1 NUMBER := 1; 
        V_POS2 NUMBER; 
        V_CNT NUMBER := 0; 
    BEGIN 
        IF G_COLUMN_SPEC IS NULL OR UPPER(G_COLUMN_SPEC) = 'ALL' THEN 
            RETURN P_STR; 
        END IF; 

        LOOP 
            V_POS2 := INSTR(P_STR, '-', V_POS1); 
            EXIT WHEN V_POS2 = 0; 

            V_STR := SUBSTR(P_STR, V_POS1, V_POS2 - V_POS1); 
            DBMS_OUTPUT.PUT_LINE(V_STR); 

            V_POS1 := V_POS2 + 1; 
            V_CNT := V_CNT + 1; 

            IF INSTR(G_COLUMN_SPEC, '[' || V_CNT || ']') > 0 THEN 
                V_VAL := V_VAL || V_STR || ', '; 
            END IF; 
        END LOOP; 

        -- Remove the trailing comma and space
        RETURN SUBSTR(V_VAL, 1, LENGTH(V_VAL) - 2); 
    END PARSE_VALUES;

    -- Procedure to insert audit data into audit table
    PROCEDURE INSERT_DATA(P_TABLE_NAME VARCHAR2, P_COLUMN_VAL CLOB) IS 
    BEGIN 
        INSERT INTO APP_AUDIT_DATA (
            AUDIT_DATA_ID, TABLE_ID, AUDIT_DATA, CTL_INS_DTTM, CTL_UPD_USER, CTL_REC_STAT
        ) VALUES (
            SEQ_APP_AUDIT_DATA.NEXTVAL, G_TABLE_ID, P_COLUMN_VAL, SYSDATE, USER, 'A'
        ); 
    END INSERT_DATA;

END Pkg_App_Audit;
/
--CHECK THE PROTOTYPE
 DESC PKG_APP_AUDIT;

--CREATE TRIGGER FOR DEPARTMENT
CREATE OR REPLACE TRIGGER TRG_DEPARTMENTS_BUDR 
BEFORE UPDATE OR DELETE ON DEPARTMENTS 
FOR EACH ROW 
DECLARE 
    V_TMP CLOB; 
    V_FLAG BOOLEAN; 
    V_COL VARCHAR2(4000); 
BEGIN 
    -- Check if auditing is enabled for the DEPARTMENTS table
    V_FLAG := PKG_APP_AUDIT.AUDIT_CHECK('DEPARTMENTS'); 

    IF V_FLAG THEN 
        -- Get column clause dynamically
        V_COL := PKG_APP_AUDIT.GET_COL_CLAUSE('DEPARTMENTS'); 

        -- Fetch old values before update/delete operation
        EXECUTE IMMEDIATE 'SELECT ' || V_COL || ' FROM DUAL' 
        INTO V_TMP 
        USING :OLD.DEPARTMENT_ID, :OLD.DEPARTMENT_NAME, :OLD.CITY, :OLD.STATE; 

        -- Parse values for auditing
        V_TMP := PKG_APP_AUDIT.PARSE_VALUES(V_TMP); 

        -- Insert audit data into audit table
        PKG_APP_AUDIT.INSERT_DATA('DEPARTMENTS', V_TMP); 
    END IF; 
END;
/ 
--CREATE TRIGGER FOR EMPLOYEE
CREATE OR REPLACE TRIGGER TRG_EMPLOYEES_BUDR 
BEFORE UPDATE OR DELETE ON EMPLOYEES 
FOR EACH ROW 
DECLARE 
    V_TMP CLOB; 
    V_FLAG BOOLEAN; 
    V_COL VARCHAR2(4000); 
BEGIN 
    -- Check if auditing is enabled for the EMPLOYEES table
    V_FLAG := PKG_APP_AUDIT.AUDIT_CHECK('EMPLOYEES'); 

    IF V_FLAG = TRUE THEN 
        -- Get column clause dynamically
        V_COL := PKG_APP_AUDIT.GET_COL_CLAUSE('EMPLOYEES'); 

        -- Fetch old values before update/delete operation
        EXECUTE IMMEDIATE 'SELECT ' || V_COL || ' FROM DUAL' 
        INTO V_TMP 
        USING :OLD.EMPLOYEE_ID, :OLD.FIRST_NAME, :OLD.LAST_NAME, :OLD.JOB_ID, 
              :OLD.MANAGER_ID, :OLD.HIRE_DATE, :OLD.SALARY, :OLD.DEPARTMENT_ID; 

        -- Parse values for auditing
        V_TMP := PKG_APP_AUDIT.PARSE_VALUES(V_TMP); 

        -- Insert audit data into audit table
        PKG_APP_AUDIT.INSERT_DATA('EMPLOYEES', V_TMP); 
    END IF; 
END;
/

-- Insert metadata for EMPLOYEES table auditing
INSERT INTO APP_AUDIT_TABLE (
    TABLE_ID, TABLE_NAME, TABLE_DESCRIPTION, AUDIT_FLAG, 
    ARCHIVE_FLAG, ARCHIVE_COUNT, PURGE_FLAG, PURGE_COUNT, 
    COLUMN_NAMES, COLUMNS_COUNT, START_DATE, END_DATE, 
    CTL_INS_DTTM, CTL_UPD_DTTM, CTL_UPD_USER, CTL_REC_STAT
) 
VALUES (
    1, 'EMPLOYEES', 'EMPLOYEE TABLE HOLDING STAFF DATA', 'Y', 
    'Y', 5, 'Y', 3, '[LAST_NAME][HIRE_DATE][SALARY]', 3, 
    TRUNC(SYSDATE), TRUNC(SYSDATE+5), SYSDATE, SYSDATE, 'DBSEC', 'A'
);

-- Insert metadata for DEPARTMENTS table auditing
INSERT INTO APP_AUDIT_TABLE (
    TABLE_ID, TABLE_NAME, TABLE_DESCRIPTION, AUDIT_FLAG, 
    ARCHIVE_FLAG, ARCHIVE_COUNT, PURGE_FLAG, PURGE_COUNT, 
    COLUMN_NAMES, COLUMNS_COUNT, START_DATE, END_DATE, 
    CTL_INS_DTTM, CTL_UPD_DTTM, CTL_UPD_USER, CTL_REC_STAT
) 
VALUES (
    2, 'DEPARTMENTS', 'DEPARTMENT TABLE', 'Y', 
    'N', 0, 'Y', 0, 'ALL', 3, 
    TRUNC(SYSDATE), TRUNC(SYSDATE+5), SYSDATE, SYSDATE, 'DBSEC', 'A'
);

-- Commit the changes
COMMIT;
--GOT ERROR WHILE INSERTION
--solution
--Instead of trying to fetch data from DUAL using bind variables directly concatenate values into a string, or modify the logic to 
--assign values to a variable and then use that
DROP TRIGGER TRG_EMPLOYEES_BUDR;
CREATE OR REPLACE TRIGGER TRG_EMPLOYEES_BUDR 
BEFORE UPDATE OR DELETE ON EMPLOYEES 
FOR EACH ROW 
DECLARE 
    V_TMP CLOB; 
    V_FLAG BOOLEAN; 
BEGIN 
    -- Check if auditing is enabled
    V_FLAG := PKG_APP_AUDIT.AUDIT_CHECK('EMPLOYEES'); 

    IF V_FLAG THEN 
        -- Manually build the column value string from :OLD values
        V_TMP := :OLD.EMPLOYEE_ID || '-' || :OLD.FIRST_NAME || '-' || :OLD.LAST_NAME || '-' ||
                 :OLD.JOB_ID || '-' || :OLD.MANAGER_ID || '-' || 
                 TO_CHAR(:OLD.HIRE_DATE, 'YYYY-MM-DD HH24:MI:SS') || '-' ||
                 :OLD.SALARY || '-' || :OLD.DEPARTMENT_ID;

        -- Parse values based on audit metadata
        V_TMP := PKG_APP_AUDIT.PARSE_VALUES(V_TMP); 

        -- Insert audit data
        PKG_APP_AUDIT.INSERT_DATA('EMPLOYEES', V_TMP); 
    END IF; 
END;
/

--testing
UPDATE EMPLOYEES
SET SALARY = 1000
WHERE EMPLOYEE_ID = 8377;
--got error for deleting 
--so checked the update history
SELECT T.TABLE_NAME, D.AUDIT_DATA, 
       TO_CHAR(D.CTL_INS_DTTM, 'DD-MON-YYYY HH24:MI:SS') DATE_CREATED,
       D.CTL_UPD_USER USERNAME
FROM APP_AUDIT_TABLE T, APP_AUDIT_DATA D
WHERE T.TABLE_ID = D.TABLE_ID;
--OUTPUT::
TABLE_NAME
------------------------------
AUDIT_DATA
--------------------------------------------------------------------------------
DATE_CREATED         USERNAME
-------------------- ------------------------------
EMPLOYEES

04-APR-2025 08:07:36 XYZ
