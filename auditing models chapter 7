--SIMPLE MODEL1
-- Table to store entities to be audited (Users, Tables, Columns)
CREATE TABLE APP_ENTITY (
    ENTITY_ID INT PRIMARY KEY IDENTITY(1,1),
    ENTITY_NAME VARCHAR(50) NOT NULL,
    ENTITY_TYPE VARCHAR(10) CHECK (ENTITY_TYPE IN ('USER', 'TABLE', 'COLUMN')),
    CTL_INS_DTTM DATETIME DEFAULT GETDATE(),
    CTL_INS_USER VARCHAR(50),
    CTL_AUD_FLAG CHAR(1) DEFAULT 'A'
);

-- Table to store types of actions that can be audited (INSERT, UPDATE, DELETE, LOGIN, LOGOUT)
CREATE TABLE APP_ACTION_TYPE (
    ACTION_TYPE_ID INT PRIMARY KEY IDENTITY(1,1),
    ACTION_TYPE_DESC VARCHAR(50) NOT NULL,
    CTL_INS_DTTM DATETIME DEFAULT GETDATE(),
    CTL_INS_USER VARCHAR(50),
    CTL_AUD_FLAG CHAR(1) DEFAULT 'A'
);

-- Table to store which actions on which entities should be audited
CREATE TABLE APP_AUDIT_ACTION (
    AUDIT_ACTION_ID INT PRIMARY KEY IDENTITY(1,1),
    ENTITY_ID INT FOREIGN KEY REFERENCES APP_ENTITY(ENTITY_ID),
    ACTION_TYPE_ID INT FOREIGN KEY REFERENCES APP_ACTION_TYPE(ACTION_TYPE_ID),
    AUDIT_START_DATE DATE,
    AUDIT_EXPIRE_DATE DATE,
    CTL_INS_DTTM DATETIME DEFAULT GETDATE(),
    CTL_INS_USER VARCHAR(50),
    CTL_AUD_FLAG CHAR(1) DEFAULT 'A'
);

-- Table to store the actual audit trail data
CREATE TABLE APP_AUDIT_DATA (
    AUDIT_DATA_ID INT PRIMARY KEY IDENTITY(1,1),
    AUDIT_ACTION_ID INT FOREIGN KEY REFERENCES APP_AUDIT_ACTION(AUDIT_ACTION_ID),
    AUDIT_TIMESTAMP DATETIME DEFAULT GETDATE(),
    AUDIT_DETAILS NVARCHAR(4000),
    CTL_INS_DTTM DATETIME DEFAULT GETDATE(),
    CTL_INS_USER VARCHAR(50),
    CTL_AUD_FLAG CHAR(1) DEFAULT 'A'
);
-- Insert entities
INSERT INTO APP_ENTITY (ENTITY_NAME, ENTITY_TYPE, CTL_INS_USER)
VALUES ('SAM', 'USER', 'DBSEC'),
       ('SALARY', 'TABLE', 'DBSEC');

-- Insert action types
INSERT INTO APP_ACTION_TYPE (ACTION_TYPE_DESC, CTL_INS_USER)
VALUES ('UPDATE', 'DBSEC'),
       ('INSERT', 'DBSEC'),
       ('DELETE', 'DBSEC');

-- Insert audit action rules
INSERT INTO APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE, CTL_INS_USER)
VALUES ((SELECT ENTITY_ID FROM APP_ENTITY WHERE ENTITY_NAME = 'SALARY' AND ENTITY_TYPE = 'TABLE'),
        (SELECT ACTION_TYPE_ID FROM APP_ACTION_TYPE WHERE ACTION_TYPE_DESC = 'UPDATE'),
        '2005-05-10', '2005-06-10', 'DBSEC');

INSERT INTO APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE, CTL_INS_USER)
VALUES ((SELECT ENTITY_ID FROM APP_ENTITY WHERE ENTITY_NAME = 'SALARY' AND ENTITY_TYPE = 'TABLE'),
        (SELECT ACTION_TYPE_ID FROM APP_ACTION_TYPE WHERE ACTION_TYPE_DESC = 'INSERT'),
        '2005-05-10', '2005-06-10', 'DBSEC');
CREATE TABLE SALARY (
    EMPLOYEE_ID INT PRIMARY KEY,
    AMOUNT DECIMAL(10,2)
);

-- Insert sample salary data
INSERT INTO SALARY (EMPLOYEE_ID, AMOUNT)
VALUES (101, 5000.00), (102, 6000.00);

CREATE OR ALTER TRIGGER TRG_AUDIT_DML
ON SALARY
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @EntityID INT, @AuditActionID INT;
    
    -- Retrieve the entity ID for the SALARY table
    SELECT @EntityID = ENTITY_ID 
    FROM APP_ENTITY 
    WHERE ENTITY_NAME = 'SALARY' AND ENTITY_TYPE = 'TABLE';

    -- Retrieve the audit action ID for UPDATE
    SELECT @AuditActionID = AUDIT_ACTION_ID
    FROM APP_AUDIT_ACTION
    WHERE ENTITY_ID = @EntityID
    AND ACTION_TYPE_ID = (SELECT ACTION_TYPE_ID FROM APP_ACTION_TYPE WHERE ACTION_TYPE_DESC = 'UPDATE');

    -- Insert audit record
    IF @AuditActionID IS NOT NULL
    BEGIN
        INSERT INTO APP_AUDIT_DATA (AUDIT_ACTION_ID, AUDIT_DETAILS, CTL_INS_USER)
        VALUES (@AuditActionID, 'SALARY table modified', SUSER_NAME());
    END
END;

-- Update a record in the SALARY table
UPDATE SALARY 
SET AMOUNT = AMOUNT + 500 
WHERE EMPLOYEE_ID = 101;

-- Check if audit logs were created
SELECT * FROM APP_AUDIT_DATA;


--SIMPLE MODEL2
CREATE TABLE SALARY_AUDIT (
    AUDIT_ID INT PRIMARY KEY IDENTITY(1,1),
    EMPLOYEE_ID INT,
    OLD_AMOUNT DECIMAL(10,2),
    NEW_AMOUNT DECIMAL(10,2),
    ACTION_TYPE VARCHAR(10), -- UPDATE, DELETE
    CHANGE_TIMESTAMP DATETIME DEFAULT GETDATE(),
    CHANGED_BY VARCHAR(50) DEFAULT SUSER_NAME()
);
CREATE OR ALTER TRIGGER TRG_SALARY_AUDIT
ON SALARY
AFTER UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Capture UPDATE actions
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO SALARY_AUDIT (EMPLOYEE_ID, OLD_AMOUNT, NEW_AMOUNT, ACTION_TYPE, CHANGED_BY)
        SELECT d.EMPLOYEE_ID, d.AMOUNT, i.AMOUNT, 'UPDATE', SUSER_NAME()
        FROM deleted d
        JOIN inserted i ON d.EMPLOYEE_ID = i.EMPLOYEE_ID;
    END
    
    -- Capture DELETE actions
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        INSERT INTO SALARY_AUDIT (EMPLOYEE_ID, OLD_AMOUNT, ACTION_TYPE, CHANGED_BY)
        SELECT EMPLOYEE_ID, AMOUNT, 'DELETE', SUSER_NAME()
        FROM deleted;
    END
END;
-- Example update to test auditing
UPDATE SALARY SET AMOUNT = AMOUNT + 500 WHERE EMPLOYEE_ID = 101;

-- Example delete to test auditing
DELETE FROM SALARY WHERE EMPLOYEE_ID = 102;

SELECT * FROM SALARY_AUDIT;

--HISTORICAL MODEL
-- Create historical table to store previous values before changes
CREATE TABLE SALARY_HISTORY (
    HISTORY_ID INT PRIMARY KEY IDENTITY(1,1),
    EMPLOYEE_ID INT,
    OLD_AMOUNT DECIMAL(10,2),
    NEW_AMOUNT DECIMAL(10,2),
    CHANGE_TIMESTAMP DATETIME DEFAULT GETDATE(),
    ACTION_TYPE VARCHAR(10), -- UPDATE, DELETE
    CHANGED_BY VARCHAR(50) DEFAULT SUSER_NAME()
);

-- Create trigger for capturing historical changes
CREATE OR ALTER TRIGGER TRG_SALARY_HISTORY
ON SALARY
AFTER UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Handle UPDATE action
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO SALARY_HISTORY (EMPLOYEE_ID, OLD_AMOUNT, NEW_AMOUNT, ACTION_TYPE, CHANGED_BY)
        SELECT d.EMPLOYEE_ID, d.AMOUNT, i.AMOUNT, 'UPDATE', SUSER_NAME()
        FROM deleted d
        JOIN inserted i ON d.EMPLOYEE_ID = i.EMPLOYEE_ID;
    END
    
    -- Handle DELETE action
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        INSERT INTO SALARY_HISTORY (EMPLOYEE_ID, OLD_AMOUNT, ACTION_TYPE, CHANGED_BY)
        SELECT EMPLOYEE_ID, AMOUNT, 'DELETE', SUSER_NAME()
        FROM deleted;
    END
END;

-- Example update that triggers historical logging
UPDATE SALARY SET AMOUNT = AMOUNT + 1000 WHERE EMPLOYEE_ID = 101;

-- Example delete that triggers historical logging
DELETE FROM SALARY WHERE EMPLOYEE_ID = 102;

-- Check history table for changes
SELECT * FROM SALARY_HISTORY;
