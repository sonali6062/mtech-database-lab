
SQL> CREATE TABLE APP_AUDIT_ENTITY(
  2  ENTITY_ID NUMBER NULL,
  3  ENTITY_NAME VARCHAR2(30) NULL,
  4  ENTITY_TYPE VARCHAR2(15) NULL,
  5  CTL_REC_STAT VARCHAR(1) NULL,
  6  PRIMARY KEY(ENTITY_ID)
  7  );

Table created.

SQL> CREATE TABLE APP_AUDIT_ACTION_TYPE (
  2      ACTION_TYPE_ID   NUMBER NULL,
  3      ACTION_TYPE_DESC VARCHAR2(30) NULL,
  4      CTL_REC_STAT     VARCHAR2(1) NULL,
  5      PRIMARY KEY (ACTION_TYPE_ID)
  6  );

Table created.

SQL> CREATE TABLE APP_AUDIT_ACTION (
  2      AUDIT_ACTION_ID   NUMBER NULL,
  3      AUDIT_START_DATE  DATE NULL,
  4      AUDIT_EXPIRE_DATE DATE NULL,
  5      CTL_INS_DTTM      DATE NULL,
  6      CTL_UPD_DTTM      DATE NULL,
  7      CTL_UPD_USER      VARCHAR2(30) NULL,
  8      CTL_REC_STAT      VARCHAR2(1) NULL,
  9      ACTION_TYPE_ID    NUMBER NULL,
 10      ENTITY_ID         NUMBER NULL,
 11      PRIMARY KEY (AUDIT_ACTION_ID),
 12      FOREIGN KEY (ENTITY_ID) REFERENCES APP_AUDIT_ENTITY,
 13      FOREIGN KEY (ACTION_TYPE_ID) REFERENCES APP_AUDIT_ACTION_TYPE
 14  );

Table created.

SQL> CREATE TABLE APP_AUDIT_DATA (
  2      AUDIT_DATA_ID  NUMBER NULL,
  3      AUDIT_DATA     VARCHAR2(4000) NULL,
  4      AUDIT_ACTION_ID NUMBER NULL,
  5      AUD_INS_DTTM   DATE NULL,
  6      AUD_UPD_USER   VARCHAR2(30) NULL,
  7      AUD_REC_STAT   VARCHAR2(1) NULL,
  8      PRIMARY KEY (AUDIT_DATA_ID),
  9      FOREIGN KEY (AUDIT_ACTION_ID) REFERENCES APP_AUDIT_ACTION
 10  );

Table created.

SQL> CREATE SEQUENCE SEQ_APP_AUDIT_DATA
  2  INCREMENT BY 1
  3  STSRT WITH 1
  4  MINVALUE 1
  5  NOCYCLE
  6  CACHE 20
  7  NOORDER;
STSRT WITH 1
*
ERROR at line 3:
ORA-00933: SQL command not properly ended


SQL> ED
Wrote file afiedt.buf

  1  CREATE SEQUENCE SEQ_APP_AUDIT_DATA
  2      INCREMENT BY 1
  3      START WITH 1
  4      MINVALUE 1
  5      NOCYCLE
  6      CACHE 20
  7*     NOORDER;
SQL>
SQL> CREATE SEQUENCE SEQ_APP_AUDIT_DATA
  2      INCREMENT BY 1
  3      START WITH 1
  4      MINVALUE 1
  5      NOCYCLE
  6      CACHE 20
  7      NOORDER;

Sequence created.

SQL> --BUILD TWO TABLES TO USE FOR APPLICATION
SQL> CREATE TABLE APP_TBL1(
  2  CODE NUMBER PRIMARY KEY,
  3  DESCRIPTION VARCHAR2(20)
  4  );

Table created.

SQL> CREATE TABLE APP_TBL2(
  2  ID NUMBER PRIMARY KEY,
  3  NAME VARCHAR2(35),
  4  PHONE VARCHAR2(14)
  5  );

Table created.

SQL> INSERT INTO APP_TBL1 (CODE, DESCRIPTION) VALUES (1, 'Description #1');

1 row created.

SQL> INSERT INTO APP_TBL1 (CODE, DESCRIPTION) VALUES (2, 'Description #2');

1 row created.

SQL> INSERT INTO APP_TBL2 (ID, NAME, PHONE) VALUES (100, 'Tom Jones', '123-123-1234');

1 row created.

SQL> INSERT INTO APP_TBL2 (ID, NAME, PHONE) VALUES (101, 'Linda Evans', '234-234-2345');

1 row created.

SQL> INSERT INTO APP_TBL2 (ID, NAME, PHONE) VALUES (102, 'Joan Collins', '345-345-3456');

1 row created.

SQL> commit;

Commit complete.

SQL> --populating the auditing repository with metadata
SQL> INSERT INTO APP_AUDIT_ACTION_TYPE (ACTION_TYPE_ID, ACTION_TYPE_DESC, CTL_REC_STAT)
  2  VALUES (1, 'UPDATE', 'A');

1 row created.

SQL>
SQL> INSERT INTO APP_AUDIT_ACTION_TYPE (ACTION_TYPE_ID, ACTION_TYPE_DESC, CTL_REC_STAT)
  2  VALUES (2, 'DELETE', 'A');

1 row created.

SQL>
SQL> INSERT INTO APP_AUDIT_ACTION_TYPE (ACTION_TYPE_ID, ACTION_TYPE_DESC, CTL_REC_STAT)
  2  VALUES (3, 'INSERT', 'A');

1 row created.

SQL>
SQL> INSERT INTO APP_AUDIT_ENTITY (ENTITY_ID, ENTITY_NAME, ENTITY_TYPE, CTL_REC_STAT)
  2  VALUES (1, 'DBSEC', 'USER', 'A');

1 row created.

SQL>
SQL> INSERT INTO APP_AUDIT_ENTITY (ENTITY_ID, ENTITY_NAME, ENTITY_TYPE, CTL_REC_STAT)
  2  VALUES (2, 'APP_TBL2', 'TABLE', 'A');

1 row created.

SQL>
SQL> INSERT INTO APP_AUDIT_ENTITY (ENTITY_ID, ENTITY_NAME, ENTITY_TYPE, CTL_REC_STAT)
  2  VALUES (3, 'APP_TBL1', 'TABLE', 'A');

1 row created.

SQL>
SQL> INSERT INTO APP_AUDIT_ACTION (AUDIT_ACTION_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE,
  2  CTL_INS_DTTM, CTL_UPD_DTTM, CTL_UPD_USER, CTL_REC_STAT, ACTION_TYPE_ID, ENTITY_ID)
  3  VALUES (1,
  4      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  5      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  6      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  7      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  8      'DBSEC', 'A', 1, 1);

1 row created.

SQL> INSERT INTO APP_AUDIT_ACTION (AUDIT_ACTION_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE,
  2      CTL_INS_DTTM, CTL_UPD_DTTM, CTL_UPD_USER, CTL_REC_STAT, ACTION_TYPE_ID, ENTITY_ID)
  3  VALUES (2,
  4      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  5      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  6      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  7      TO_DATE('06/28/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'),
  8      'DBSEC', 'A', 2, 3);

1 row created.

SQL>
SQL> COMMIT;

Commit complete.

SQL> --create stored package
SQL> CREATE OR REPLACE PACKAGE Pkg_App_Audit IS
  2      PROCEDURE INSERT_DATA(
  3          P_TABLE_NAME VARCHAR2,
  4          P_OPERATION VARCHAR2
  5      );
  6
  7      FUNCTION AUDIT_CHECK (
  8          P_USER_NAME VARCHAR2,
  9          P_TABLE_NAME VARCHAR2,
 10          P_OPERATION VARCHAR2
 11      ) RETURN NUMBER;
 12  END;
 13  /

Package created.

SQL>
SQL> CREATE OR REPLACE PACKAGE BODY Pkg_App_Audit IS
  2      FUNCTION AUDIT_CHECK(
  3          P_USER_NAME VARCHAR2,
  4          P_TABLE_NAME VARCHAR2,
  5          P_OPERATION VARCHAR2
  6      ) RETURN NUMBER IS
  7          V_ID NUMBER := 0;
  8      BEGIN
  9          SELECT A.AUDIT_ACTION_ID
 10          INTO V_ID
 11          FROM APP_AUDIT_ENTITY E,
 12               APP_AUDIT_ACTION A,
 13               APP_AUDIT_ACTION_TYPE T
 14          WHERE A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
 15            AND A.ENTITY_ID = E.ENTITY_ID
 16            AND E.ENTITY_NAME = P_USER_NAME
 17            AND E.ENTITY_TYPE = 'USER'
 18            AND T.ACTION_TYPE_DESC = UPPER(P_OPERATION)
 19            AND SYSDATE BETWEEN AUDIT_START_DATE AND AUDIT_EXPIRE_DATE;
 20
 21          EXCEPTION WHEN OTHERS THEN
 22              RETURN NULL;
 23          END;
 24
 25          IF V_ID IS NULL THEN
 26          BEGIN
 27              SELECT A.AUDIT_ACTION_ID
 28              INTO V_ID
 29              FROM APP_AUDIT_ENTITY E,
 30                   APP_AUDIT_ACTION A,
 31                   APP_AUDIT_ACTION_TYPE T
 32              WHERE A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
 33                AND A.ENTITY_ID = E.ENTITY_ID
 34                AND E.ENTITY_NAME = P_TABLE_NAME
 35                AND E.ENTITY_TYPE = 'TABLE'
 36                AND T.ACTION_TYPE_DESC = UPPER(P_OPERATION)
 37                AND SYSDATE BETWEEN AUDIT_START_DATE AND AUDIT_EXPIRE_DATE;
 38
 39              EXCEPTION WHEN OTHERS THEN
 40                  RETURN NULL;
 41              END;
 42          END IF;
 43
 44          RETURN V_ID;
 45      END;
 46
 47      PROCEDURE INSERT_DATA(
 48          P_TABLE_NAME VARCHAR2,
 49          P_OPERATION VARCHAR2
 50      ) IS
 51          V_ID NUMBER;
 52      BEGIN
 53          V_ID := AUDIT_CHECK(USER, P_TABLE_NAME, P_OPERATION);
 54
 55          IF V_ID IS NULL THEN
 56              RETURN;
 57          END IF;
 58
 59          INSERT INTO APP_AUDIT_DATA(AUDIT_DATA_ID, AUDIT_DATA, AUDIT_ACTION_ID,
 60                                     AUD_INS_DTTM, AUD_UPD_USER, AUD_REC_STAT)
 61          VALUES(SEQ_APP_AUDIT_DATA.NEXTVAL, P_OPERATION, V_ID,
 62                 SYSDATE, USER, 'A');
 63      END;
 64  END;
 65  /

Warning: Package Body created with compilation errors.

SQL> CREATE OR REPLACE TRIGGER TRG_TableName_BUDIR
  2  BEFORE UPDATE OR DELETE OR INSERT ON TableName
  3  FOR EACH ROW
  4  DECLARE
  5      V_OPERATION VARCHAR2(20);
  6  BEGIN
  7      IF INSERTING THEN
  8          V_OPERATION := 'INSERT';
  9      ELSIF UPDATING THEN
 10          V_OPERATION := 'UPDATE';
 11      ELSE
 12          V_OPERATION := 'DELETE';
 13      END IF;
 14
 15      PKG_APP_AUDIT.INSERT_DATA('TableName', V_OPERATION);
 16  END;
 17  /
BEFORE UPDATE OR DELETE OR INSERT ON TableName
                                     *
ERROR at line 2:
ORA-00942: table or view does not exist


SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE TRIGGER TRG_APP_TBL1_BUDIR
  2  BEFORE UPDATE OR DELETE OR INSERT ON APP_TBL1
  3  FOR EACH ROW
  4  DECLARE
  5      V_OPERATION VARCHAR2(20);
  6  BEGIN
  7      IF INSERTING THEN
  8          V_OPERATION := 'INSERT';
  9      ELSIF UPDATING THEN
 10          V_OPERATION := 'UPDATE';
 11      ELSE
 12          V_OPERATION := 'DELETE';
 13      END IF;
 14      PKG_APP_AUDIT.INSERT_DATA('APP_TBL1', V_OPERATION);
 15* END;
 16
 17  /

Trigger created.

SQL> -- Creating Trigger for APP_TBL2
SQL> CREATE OR REPLACE TRIGGER TRG_APP_TBL2_BUDIR
  2  BEFORE UPDATE OR DELETE OR INSERT ON APP_TBL2
  3  FOR EACH ROW
  4  DECLARE
  5      V_OPERATION VARCHAR2(20);
  6  BEGIN
  7      IF INSERTING THEN
  8          V_OPERATION := 'INSERT';
  9      ELSIF UPDATING THEN
 10          V_OPERATION := 'UPDATE';
 11      ELSE
 12          V_OPERATION := 'DELETE';
 13      END IF;
 14
 15      PKG_APP_AUDIT.INSERT_DATA('APP_TBL2', V_OPERATION);
 16  END;
 17  /

Trigger created.
